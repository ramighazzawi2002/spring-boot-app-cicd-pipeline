pipeline {
  agent {
    docker {
      image 'pshar10/maven-pranav-docker-agent:v1'
      args '--user root --privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  
  // --- التعديل الحاسم: تخطي عملية الخروج التلقائية الفاشلة ---
  options {
    skipDefaultCheckout(true)
  }
  // -------------------------------------------------------------
  
  stages {
    
    stage('Checkout') {
      steps {
        // بما أننا تخطينا الخروج التلقائي، يجب أن نقوم بالخروج يدوياً الآن
        checkout scm 
        sh 'echo Repository checked out successfully'
      }
    }
    
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd spring-boot-app && mvn clean package' 
      }
    }
    
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.144.5.200:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "pshar10/cicd-pipeline:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    
    stage('Ask for Replicas') {
      steps {
        script {
          replicas = input(
            message: 'Enter the number of replicas:',
            parameters: [
              string(defaultValue: '2', description: 'Number of replicas', name: 'replicas')
            ]
          )
        }
      }
    }
    
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "spring-boot-app-cicd-pipeline"
        GIT_USER_NAME = "ramighazzawi2002"
      }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
              sh '''
                echo "Replicas value: ${replicas}"

                # هذه الأوامر تعمل الآن لأن 'checkout scm' في المرحلة الأولى هيأت مجلد Git
                git config user.email "rami.ghazzawiabed@gmail.com"
                git config user.name "ramighazzawi2002"
                BUILD_NUMBER=${BUILD_NUMBER}
                REPLICAS_VALUE="${replicas}"

                # Update the image tag
                sed -i "s|image: pshar10/cicd-pipeline:[^ ]*|image: pshar10/cicd-pipeline:${BUILD_NUMBER}|g" Manifests/deployment.yml

                # Update the replicas count
                sed -i "s|replicas: [0-9]*|replicas: ${REPLICAS_VALUE}|g" Manifests/deployment.yml
                
                git add Manifests/deployment.yml
                git commit -m "Update deployment image to version ${BUILD_NUMBER} and replicas to ${REPLICAS_VALUE}"
                
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
              '''
            }
        }
    }
  }
}