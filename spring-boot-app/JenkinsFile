pipeline {
  agent {
    docker {
      image 'ramighazzawi/jenkins-k8s-agent:v1'
      args '--user root --privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  
  options {
    skipDefaultCheckout(true)
  }
  
  stages {
    
    stage('Checkout') {
      steps {
        checkout scm 
        sh 'echo Repository checked out successfully'
      }
    }
    
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd spring-boot-app && mvn clean package' 
      }
    }
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ramighazzawi/cicd-pipeline:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    
    stage('Ask for Replicas') {
      steps {
        script {
          // Store input directly into a global environment variable
          env.REPLICAS_VALUE = input(
            message: 'Enter the number of replicas:',
            parameters: [
              string(defaultValue: '2', description: 'Number of replicas', name: 'replicas')
            ]
          )
        }
      }
    }
    
   stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "spring-boot-app-cicd-pipeline"
        GIT_USER_NAME = "ramighazzawi2002"
      }
       steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
              sh """
                echo "Replicas value: \${REPLICAS_VALUE}"
                // ... (git config commands are the same)

                # FIX: استخدام awk بدلاً من sed لتجنب مشاكل الصيغة
                awk -v tag="ramighazzawi/cicd-pipeline:\${BUILD_NUMBER}" '
                  /image:/ {
                    print "        - name: spring-boot-app"
                    print "          image: " tag 
                    next
                  }
                  /replicas:/ {
                    print "  replicas: \${REPLICAS_VALUE}"
                    next
                  }
                  { print }
                ' Manifests/deployment.yml > temp_deployment.yml
                
                mv temp_deployment.yml Manifests/deployment.yml

                // ... (git add, commit, push commands are the same)
              """
            }
        }
    }
    
    stage('Deploy to Kubernetes') {
      steps {
        script {
          withCredentials([file(credentialsId: 'minikube-config', variable: 'KUBECONFIG_FILE')]) {
            sh '''
              # Set the KUBECONFIG file for kubectl to use
              export KUBECONFIG=$KUBECONFIG_FILE
              
              echo "Attempting deployment to Minikube..."
              
              # FINAL NETWORK FIXES: Use --validate=false and --insecure-skip-tls-verify 
              # to bypass all remaining certificate and I/O timeout issues.
              kubectl apply --validate=false --insecure-skip-tls-verify -f Manifests/deployment.yml
              kubectl apply --validate=false --insecure-skip-tls-verify -f Manifests/service.yml 
              
              echo "Deployment applied successfully."
            '''
          }
        }
      }
    }
  }
}