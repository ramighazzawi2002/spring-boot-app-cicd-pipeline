pipeline {
  agent {
    docker {
      image 'ramighazzawi/jenkins-k8s-agent:v1'
      args '--user root --privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  
  options {
    skipDefaultCheckout(true)
  }
  
  stages {
    
    stage('Checkout') {
      steps {
        checkout scm 
        sh 'echo Repository checked out successfully'
      }
    }
    
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd spring-boot-app && mvn clean package' 
      }
    }
    
    // (Static Code Analysis stage is commented out, which is fine for now)
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ramighazzawi/cicd-pipeline:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    
    stage('Ask for Replicas') {
      steps {
        script {
          // ðŸ›‘ FIX 1: Store input directly into a global environment variable (env.REPLICAS_VALUE)
          env.REPLICAS_VALUE = input(
            message: 'Enter the number of replicas:',
            parameters: [
              string(defaultValue: '2', description: 'Number of replicas', name: 'replicas')
            ]
          )
        }
      }
    }
    
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "spring-boot-app-cicd-pipeline"
        GIT_USER_NAME = "ramighazzawi2002"
      }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
              // Using triple quotes (""") for cleaner shell scripts
              sh """
                # The value is now available through the environment variable
                echo "Replicas value: \$REPLICAS_VALUE"

                git config user.email "rami.ghazzawiabed@gmail.com"
                git config user.name "ramighazzawi2002"
                
                # ðŸ›‘ FIX 2a: Ensure space after 'image:' in the search pattern to match YAML format
                # Note: Check your YAML file for the exact image name (ramighazzawi vs pshar10)
                sed -i 's|image: ramighazzawi/cicd-pipeline:[^ ]*|image: ramighazzawi/cicd-pipeline:${BUILD_NUMBER}|g' Manifests/deployment.yml

                # ðŸ›‘ FIX 2b: Use the environment variable directly
                sed -i 's|replicas: [0-9]*|replicas: \${REPLICAS_VALUE}|g' Manifests/deployment.yml
                
                git add Manifests/deployment.yml
                
                # Check if there are changes before committing
                if git diff --cached --exit-code; then
                    echo "No changes found in Manifests/deployment.yml. Skipping commit."
                else
                    git commit -m "Update deployment image to version \${BUILD_NUMBER} and replicas to \${REPLICAS_VALUE}"
                    git push https://\${GITHUB_TOKEN}@github.com/\${GIT_USER_NAME}/\${GIT_REPO_NAME} HEAD:main
                fi
              """
            }
        }
    }
  stage('Deploy to Kubernetes') {
      steps {
        script {
          withCredentials([file(credentialsId: 'minikube-config', variable: 'KUBECONFIG_FILE')]) {
            sh '''
              export KUBECONFIG=$KUBECONFIG_FILE
              
              kubectl apply -f Manifests/deployment.yml
              kubectl apply -f Manifests/service.yml 
              
              echo "Deployment applied successfully."
            '''
          }
        }
      }
    }
  }
}